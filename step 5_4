% PARAMETERS
clear; close all;clc;
SNR_dB       = 10;        % desired operating SNR
T            = 1;         % symbol period (normalized)
true_delta_f = 0;         % start with zero CFO
pilot_lengths= [32, 64, 128];
Ks           = [1, 4, 8];
nTrials      = 500;

results = struct();

for Np = pilot_lengths
  a = exp(1j*2*pi*(0:Np-1)/Np);  % e.g. a QPSK pilot
  for K = Ks
    tau_err = zeros(nTrials,1);
    df_err  = zeros(nTrials,1);
    for t = 1:nTrials
      % 1) generate frame: pilot + data
      frame = [a, randn(1,200)+1j*randn(1,200)];
      % 2) embed at random delay
      delay = randi(100);
      y_tx  = [zeros(1,delay), frame, zeros(1,100)];
      % 3) apply CFO
      t_axis = (0:length(y_tx)-1)*T;
      y_cfo = y_tx .* exp(1j*2*pi*true_delta_f*t_axis);
      % 4) add AWGN at SNR_dB
      y = awgn(y_cfo, SNR_dB, 'measured');
      % 5) estimate
      [tau_hat, df_hat] = frame_freq_acq(y, a, T, K, Np);
      tau_err(t) = tau_hat - delay;
      df_err(t)  = df_hat - true_delta_f;
    end
    results(Np,K).tau_var = var(tau_err);
    results(Np,K).df_var  = var(df_err);
  end
end

% 6) Plot
figure; 
for i=1:numel(Ks)
  K = Ks(i);
  vars = arrayfun(@(Np) results(Np,K).tau_var, pilot_lengths);
  plot(pilot_lengths, vars, '-o'); hold on;
end
xlabel('Pilot length N_p');
ylabel('Timing error variance (samples)');
legend(arrayfun(@(K) sprintf('K=%d',K), Ks, 'uni',0));
title(sprintf('Timing variance at %d dB SNR', SNR_dB));
grid on;

figure;
for i=1:numel(Ks)
  K = Ks(i);
  vars = arrayfun(@(Np) results(Np,K).df_var, pilot_lengths);
  plot(pilot_lengths, vars, '-o'); hold on;
end
xlabel('Pilot length N_p');
ylabel('CFO error variance (Hz^2)');
legend(arrayfun(@(K) sprintf('K=%d',K), Ks, 'uni',0));
title(sprintf('CFO variance at %d dB SNR', SNR_dB));
grid on;
